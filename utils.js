var crypto = require('crypto'),
    db = require('./db'),
    kinesalitePutRecord = require('kinesalite/actions/putRecord')

var awsRegion = process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION || 'us-east-1'

exports.awsRegion = awsRegion
exports.getTableNameFromStreamArn = getTableNameFromStreamArn
exports.createStreamRecord = createStreamRecord
exports.writeStreamRecord = writeStreamRecord
exports.makeShardIdLong = makeShardIdLong
exports.makeShardIdShort = makeShardIdShort

function getTableNameFromStreamArn(streamArn) {
  var streamArnParts = streamArn.split('/stream/'),
      tableArn = streamArnParts[0],
      tableArnParts = tableArn.split(':table/'),
      tableName = tableArnParts[1]

  return tableName
}

function createStreamRecord(table, oldItem, newItem) {
  var record = {
    awsRegion: awsRegion,
    dynamodb: {
      ApproximateCreationDateTime: Math.floor(Date.now() / 1000),
      Keys: {},
      SizeBytes: 0,
      StreamViewType: table.StreamSpecification.StreamViewType,
    },
    eventID: crypto.randomBytes(20).toString('hex'),
    eventSource: 'aws:dynamodb',
    eventVersion: '1.1',
  }

  if (oldItem) {
    record.dynamodb.OldImage = oldItem
    record.dynamodb.SizeBytes += db.itemSize(oldItem, false, true)
    record.eventName = 'REMOVE'
  }
  if (newItem) {
    record.dynamodb.NewImage = newItem
    record.dynamodb.SizeBytes += db.itemSize(newItem, false, true)

    if (record.eventName) {
      record.eventName = 'MODIFY'
    } else {
      record.eventName = 'INSERT'
    }
  }

  db.traverseKey(table, function(attr) {
    if (newItem) {
      return record.dynamodb.Keys[attr] = newItem[attr]
    } else {
      return record.dynamodb.Keys[attr] = oldItem[attr]
    }
  })

  return record
}

function writeStreamRecord(store, tableName, streamRecord, cb) {
  kinesalitePutRecord(store.kinesalite, {
    StreamName: tableName,
    Data: JSON.stringify(streamRecord),
    PartitionKey: 'foo'
  }, function(err) {
    if (err) return cb(err)

    if (store.options.verbose) {
      console.log('Wrote ' + streamRecord.eventName + ' record to stream for table ' + tableName)
    }

    cb()
  })
}

// Kinesis shard ids only need to be 1 character long, but Dynamo shard ids
// need to be 28 characters long. The shard ids generated by kinesalite are
// too short, so (1) expose a longer version from Dynalite, and (2) shorten
// them again before sending to kinesalite.
var shardIdPrefix = 'dynamo-compatible-'
function makeShardIdLong(kinesisShardId) {
  return shardIdPrefix + kinesisShardId
}

function makeShardIdShort(dynamoShardId) {
  return dynamoShardId.slice(shardIdPrefix.length)
}
